=begin
题目描述
　　给你一根长度为n的绳子，请把绳子剪成m段（m、n都是整数，n>1并且m>1），每段绳子的长度记为k[0],k[1],...,k[m]。请问k[0]xk[1]x...xk[m]可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
输入描述:
　　输入一个数n，意义见题面。（2 <= n <= 60）

示例1
输入　　8
输出　　18

/**
 * 题目分析：
 * 先举几个例子，可以看出规律来。
 * 4 ： 2*2
 * 5 ： 2*3
 * 6 ： 3*3
 * 7 ： 2*2*3 或者4*3
 * 8 ： 2*3*3
 * 9 ： 3*3*3
 * 10：2*2*3*3 或者4*3*3
 * 11：2*3*3*3
 * 12：3*3*3*3
 * 13：2*2*3*3*3 或者4*3*3*3
 *
 * 下面是分析：
 * 首先判断k[0]到k[m]可能有哪些数字，实际上只可能是2或者3。
 * 当然也可能有4，但是4=2*2，我们就简单些不考虑了。
 * 5<2*3,6<3*3,比6更大的数字我们就更不用考虑了，肯定要继续分。
 * 其次看2和3的数量，2的数量肯定小于3个，为什么呢？因为2*2*2<3*3，那么题目就简单了。
 * 直接用n除以3，根据得到的余数判断是一个2还是两个2还是没有2就行了。
 * 由于题目规定m>1，所以2只能是1*1，3只能是2*1，这两个特殊情况直接返回就行了。
 *
 * 乘方运算的复杂度为：O(log n)，用动态规划来做会耗时比较多。
 */
=end

def cutRope(target)
  return 1 if target == 2
  return 2 if target == 3
  num3 = target/3
  num2 = 0
  case target % 3
  when 0, 1
    num3 = num3-1
    num2 = 2
  when 2
    num2 = 1;
  end
  return (2**num2) * (3**num3)
end

puts cutRope(2)
puts cutRope(4)
puts cutRope(10)



#动态规划:长度为i的可得最大乘积:dp[i]=dp[j]*dp[i-j]的最大值
def cutRope2(n)
  # n<=3的情况，m>1必须要分段
  return 1 if target == 2
  return 2 if target == 3
  #长度为i的时候可得的最大乘积
  dp = Array.new(n+1)
  dp[1]=1
  dp[2]=2
  dp[3]=3
  res=0 #记录最大的
  (4..n).each do |i| #注意4为分界
    (1..i/2).each do |j|
      #动态规划:长度为i的可得最大乘积:dp[i]=dp[j]*dp[i-j]的最大值
      res=[res, dp[j]*dp[i-j]].max
    end
  end

  dp[n];
end
puts cutRope(10)
